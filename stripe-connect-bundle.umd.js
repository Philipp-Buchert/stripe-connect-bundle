(function(a){typeof define=="function"&&define.amd?define(a):a()})(function(){"use strict";const a={setOnLoadError:e=>{},setOnLoaderStart:e=>{}},m={"account-onboarding":{setFullTermsOfServiceUrl:e=>{},setRecipientTermsOfServiceUrl:e=>{},setPrivacyPolicyUrl:e=>{},setSkipTermsOfServiceCollection:e=>{},setCollectionOptions:e=>{},setOnExit:e=>{},setOnStepChange:e=>{}},"account-management":{setCollectionOptions:e=>{}},"notification-banner":{setCollectionOptions:e=>{},setOnNotificationsChange:e=>{}},payments:{setDefaultFilters:e=>{}},"payment-details":{setPayment:e=>{},setOnClose:e=>{}},"tax-settings":{setHideProductTaxCodeSelector:e=>{},setDisplayHeadOfficeCountries:e=>{},setOnTaxSettingsUpdated:e=>{}},"tax-registrations":{setOnAfterTaxRegistrationAdded:e=>{},setDisplayCountries:e=>{}}},y={"account-onboarding":"stripe-connect-account-onboarding",payments:"stripe-connect-payments","payment-details":"stripe-connect-payment-details",payouts:"stripe-connect-payouts","payouts-list":"stripe-connect-payouts-list",balances:"stripe-connect-balances","account-management":"stripe-connect-account-management","notification-banner":"stripe-connect-notification-banner",documents:"stripe-connect-documents","tax-registrations":"stripe-connect-tax-registrations","tax-settings":"stripe-connect-tax-settings"},h="loadConnect was called but an existing Connect.js script already exists in the document; existing script parameters will be used",O="https://connect-js.stripe.com/v0.1/connect.js",C="https://connect-js.stripe.com/v1.0/connect.js",S=()=>document.querySelectorAll(`script[src="${C}"]`)[0]||document.querySelectorAll(`script[src="${O}"]`)[0]||null,b=()=>{const e=document.createElement("script");if(e.src=C,!document.head)throw new Error("Expected document.head not to be null. Connect.js requires a <head> element.");return document.head.appendChild(e),e};let l=null;const _=()=>(l!==null||(l=new Promise((e,o)=>{if(typeof window>"u"){o("ConnectJS won't load when rendering code in the server - it can only be loaded on a browser. This error is expected when loading ConnectJS in SSR environments, like NextJS. It will have no impact in the UI, however if you wish to avoid it, you can switch to the `pure` version of the connect.js loader: https://github.com/stripe/connect-js#importing-loadconnect-without-side-effects.");return}if(window.StripeConnect&&console.warn(h),window.StripeConnect){const t=f(window.StripeConnect);e(t);return}try{let t=S();t?console.warn(h):t||(t=b()),t.addEventListener("load",()=>{if(window.StripeConnect){const s=f(window.StripeConnect);e(s)}else o(new Error("Connect.js did not load the necessary objects"))}),t.addEventListener("error",()=>{o(new Error("Failed to load Connect.js"))})}catch(t){o(t)}})),l),v=e=>e in m,j=(e,o)=>{var t;const s=(()=>{try{return o.fetchClientSecret()}catch(n){return Promise.reject(n)}})(),p=(t=o.metaOptions)!==null&&t!==void 0?t:{},c=e.then(n=>n.initialize(Object.assign(Object.assign({},o),{metaOptions:Object.assign(Object.assign({},p),{eagerClientSecretPromise:s})})));return{create:n=>{let r=y[n];r||(r=n);const i=document.createElement(r),x=v(n)?m[n]:{},I=Object.assign(Object.assign({},x),a);for(const d in I)i[d]=function(u){c.then(()=>{this[`${d}InternalOnly`](u)})};return c.then(d=>{if(!i.isConnected&&!i.setConnector){const u=i.style.display;i.style.display="none",document.body.appendChild(i),document.body.removeChild(i),i.style.display=u}if(!i||!i.setConnector)throw new Error(`Element ${n} was not transformed into a custom element. Are you using a documented component? See https://docs.stripe.com/connect/supported-embedded-components for a list of supported components`);i.setConnector(d.connect)}),i},update:n=>{c.then(r=>{r.update(n)})},debugInstance:()=>c,logout:()=>c.then(n=>n.logout())}},f=e=>(window.StripeConnect=window.StripeConnect||{},window.StripeConnect.optimizedLoading=!0,{initialize:t=>{var s;const p=(s=t.metaOptions)!==null&&s!==void 0?s:{};return e.init(Object.assign(Object.assign({},t),{metaOptions:Object.assign(Object.assign({},p),{sdk:!0,sdkOptions:{sdkVersion:"3.3.19"}})}))}}),w=Promise.resolve().then(()=>_());let g=!1;w.catch(e=>{g||console.warn(e)});const E=e=>(g=!0,j(w,e));window.initializeStripeAccountManagement=async e=>{if(!e){console.error("Client Secret nicht verfÃ¼gbar");return}const o=await E({publishableKey:"YOUR_PUBLISHABLE_KEY",fetchClientSecret:()=>Promise.resolve(e)});try{const t=o.create("account-management"),s=document.getElementById("account-management-container");s.innerHTML="",s.appendChild(t)}catch(t){console.error("Fehler beim Initialisieren des Account Management Moduls:",t)}}});
